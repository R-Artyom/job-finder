<?php

namespace App\Http\Controllers\Vacancies;

use App\Http\Controllers\Controller;
use App\Http\Controllers\Employers\StoreController as EmployersStoreController;
use App\Models\Counter;
use App\Models\Employer;
use App\Models\Vacancy;
use Illuminate\Http\Client\ConnectionException;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\DB;

class RunParseController extends Controller
{
    /**
     * Handle the incoming request.
     */
    public function __invoke()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $counter = Counter::query()->firstOrCreate(
            ['name' => 'vacancyId'],
            ['value' => 1, 'status' => 'run']
        );
        $vacancyId = $counter->value;

        if ($counter->status === 'run' && $vacancyId < $counter->limit) {
            // –°—á–µ—Ç—á–∏–∫ –∑–∞–Ω—è—Ç
            $counter->status = 'busy';
            $counter->update(['value' => $vacancyId]);

            // –ù–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            $startTime = microtime(true);
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            $fixedTime = microtime(true);

            // –ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 57 —Å–µ–∫
            while ($fixedTime - $startTime < 57) {
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 10 –º—Å –¥–æ 100 –º—Å
                usleep(rand(10000, 100000));

                // –ë–ª–æ–∫ –¥–ª—è –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                try {
                    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    DB::beginTransaction();

                    // –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Ç–∞–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑–µ MySql
                    if (!Vacancy::query()->where('id', $vacancyId)->exists()) {
                        // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
                        $response = Http::get("https://api.hh.ru/vacancies/$vacancyId");
                        if ($response->successful()) {
                            $vacancyData = $response->json();
                            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
                            if (isset($vacancyData['employer']['id'])) {
                                $employerId = $vacancyData['employer']['id'];
                                // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω—ë–º
                                if (!empty($employerId)) {
                                    // –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ MySql
                                    if (!Employer::query()->where('id', $employerId)->exists()) {
                                        $response = Http::get("https://api.hh.ru/employers/{$employerId}");
                                        $data = $response->json();
                                        if ($response->successful()) {
                                            (new EmployersStoreController)($data);
                                        } else {
                                            // –ï—Å–ª–∏ –≤ –±–∞–∑–µ hh –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, —Ç–æ –ø—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å
                                            (new EmployersStoreController)(['id' => $employerId]);
                                        }
                                    }
                                }
                            } else {
                                $vacancyData['employer']['id'] = null;
                            }

                            // –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏
                            (new StoreController)($vacancyData);
                        }
                    }
                    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑–µ
                    $vacancyId++;
                    $counter->update(['value' => $vacancyId]);

                    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    if ($vacancyId < $counter->limit) {
                        DB::commit();
                    // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Å—á–µ—Ç—á–∏–∫–∞
                    } else {
                        // –°—á–µ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω
                        $counter->status = 'run';
                        $counter->update(['value' => $vacancyId]);
                        DB::commit();
                        return;
                    }

                // –ë–ª–æ–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                } catch (ConnectionException $e) {
                    // –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    DB::rollBack();
                    logger()->error('üü° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ' . '(' . route('vacancies.run') . ')',
                        [
                            'vacancyId' => $vacancyId,
                            'message' => $e->getMessage()
                        ]
                    );
                    $notifications[] = ['üü° –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', $e->getMessage()];
                } catch (\Exception $e) {
                    // –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    DB::rollBack();
                    $counter->update(['status' => 'error']);
                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
                    logger()->error('üî¥ –û—à–∏–±–∫–∞ –æ–±—â–∞—è ' . '(' . route('vacancies.run') . ')',
                        [
                            'vacancyId' => $vacancyId,
                            'error' => $e->getMessage(),
                        ]
                    );
                    $notifications[] = ['üî¥ –û—à–∏–±–∫–∞ –æ–±—â–∞—è', $e->getMessage()];
                    break;

                } finally {
                    // –ö–∞–∂–¥—ã–µ 100000 –æ—Ç—á—ë—Ç
                    if ($vacancyId % 100000 === 0) {
                        $notifications[] = ['üü¢ –û—Ç—á—ë—Ç', "–°—á–µ—Ç—á–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ—Å—Ç–∏–≥ –∑–Ω–∞—á–µ–Ω–∏—è $vacancyId"];
                    }
                }

                // –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
                $fixedTime = microtime(true);
            }
            // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –¥–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
            if ($fixedTime - $startTime > 60) {
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
                logger()->error('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ > 60 —Å–µ–∫ ' . '(' . route('vacancies.run') . ')');
                $notifications[] = ['‚ö™Ô∏è –û—Ç—á—ë—Ç', '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥'];
            }

            // –°—á–µ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
            if ($counter->status !== 'error') {
                $counter->status = 'run';
                $counter->update(['value' => $vacancyId]);
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (isset($notifications)) {
                foreach ($notifications as $notification) {
                    $this->sendEmailNotify($notification);
                    $this->sendTelegramNotify($notification);
                }
            }
        }
    }
}
